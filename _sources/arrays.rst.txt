======
Arrays
======

Objectives
----------

- Understand what arrays are and how to use them


References
----------

- https://makecode.microbit.org/reference/arrays


index
-----

- Return the index of the first occurrence of a value in an array::

    Array.index(item: T, from: number): number

- Parameters

    - ``item``: the item to find somewhere in the array.
    - ``from``: the position in the array to begin the search. The first position is 0.

- Returns: the position in the array where the element is found. This number is -1 if the element isn't found anywhere in the array.

- Example::

    movieSnacks = ["mints", "cola", "pretzel", "popcorn", "peanuts"]
    popcornIndex = movieSnacks.index("popcorn")


push
----

- Add an element to the end of an array. ::

    Array.append(item: T): None

- Parameters

    - ``item``: the element to add to the end of the array.

- Example::

    want = ["peace", "peace", "love", "peace"]
    want.append("love")

pop
---

- Remove and return the last element from an array. ::

    Array.pop(): T

- Returns: the last element in the array


shift
-----

- Remove and return the first element from an array. ::

    Array.shift(): T

- Returns: the first element in the array


unshift
-------

- Add an element to the front of an array. ::

    Array.unshift(value: T): number

- Parameters

    - ``item``: the element to add to the front of the array.


Insert at
---------

- Insert an element into an array at some position. ::

    Array.insert_at(index: number, value: T): None

- Parameters

    - ``index``: a number which is the position in the array to insert the element at.
    - ``value``: a value to insert into the array at the position of index

- Example: make a ordered array that has the numbers from a jumbled an array in order of lowest to highest. ::

    removed = 0
    jumbled = [4, 5, 2, 1, 6, 9, 0, 3, 8, 7]
    ordered = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    for item in jumbled:
        ordered.insert_at(item, item)
        removed = ordered.remove_at(item + 1)


Remove at
---------

- Remove an element from an array at some position. ::

    Array.remove_at(index: number): T

- Parameters

    - ``index``: the position in the array to get the element from.

- Returns: the element in the array from the position you chose.


Reverse
-------

- Reverse all the elements in an array. ::

    Array.reverse(): None

- Returns: the same array but now it's reversed.

- Example ::

    rainbow = ["red", "orange", "yellow", "green", "blue", "indigo", "violet"]
    rainbow.reverse()



